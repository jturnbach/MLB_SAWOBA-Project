labs(x = "Horizontal Break (in.)", y = "Vertical Break (in.)", color = "Pitch Type", fill = "League Average") +
theme_minimal() +
theme(strip.text = element_text(size = 14),
legend.text = element_text(size = 14), legend.title = element_text(size = 14),
axis.text.x = element_text(size = 14), axis.title.x = element_text(size = 14),
axis.text.y = element_text(size = 14), axis.title.y = element_text(size = 14),
panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
geom_vline(xintercept = fb_avgs$lg_hb, color = "black", linetype = "dotted", size = 1.5) +
geom_hline(yintercept = fb_avgs$lg_ivb, color = "black", linetype = "dotted", size = 1.5) +
geom_point(data = secondary_avgs, aes(x = lg_hb, y = lg_ivb, fill = PitchType), size = 8, shape = 21, stroke = 2, color = "black")
breakPlot
# Set working directory
wd <- "C:/Users/malco/Documents/GitHub/DS440/" # Change as needed
# Load libraries
library(tidyverse)
library(scales)
library(GeomMLBStadiums)
# Read in data
bips <- read.csv(paste0(wd, "project/volume/data/interim/bip_raw.csv"))
# Print dimensions and first few observations
dim(bips)
head(bips)
# Factor coloring
bip_res_colors <- c("field_out" = "#0066CC", "single" = "#FFFF00", "double" = "#FFCC00", "triple" = "#FF6600", "home_run" = "#CC3333")
bb_class_colors <- c("barrel" = "#8B0000", solid_contact = "#FF4040", "flare_burner" = "#FFB347", "poorly_topped" = "#77DD77", "poorly_under" = "#8BD3E6", "poorly_weak" = "#FDFD96")
# Factor ordering
bip_res_order <- c("field_out", "single", "double", "triple", "home_run")
spray_type_order <- c("pull", "center", "oppo")
sprint_speed_type_order <- c("slow", "average", "fast")
bb_class_order <- c("barrel", "solid_contact", "flare_burner", "poorly_topped", "poorly_under", "poorly_weak")
# Create BIP result
bips <- bips %>%
mutate(bip_result = case_when(
events %in% c("field_out", "force_out", "grounded_into_double_play", "field_error", "sac_fly", "double_play", "fielders_choice", "fielders_choice_out", "sac_fly_double_play", "triple_play") ~ "field_out",
TRUE ~ events)) %>%
filter(!(events %in% c("sac_bunt", "sac_bunt_double_play", "catcher_interf"))) # Remove specified events
unique(bips$bip_result)
# Check missing values
modeling_columns <- bips %>% select(launch_speed, launch_angle, sprint_speed, spray_angle)
colSums(is.na(modeling_columns))
bips %>%
group_by(game_year) %>%
summarise(count = n()) %>%
arrange(desc(count))
# Numerical summary of exit velocity and launch angle
cat("\nExit Velocity 5 Number Summary\n")
summary(bips$launch_speed)
cat("Launch Angle 5 Number Summary\n")
summary(bips$launch_angle)
# Visual summary of exit velocity and launch angle
summary_stats <- bips %>%
summarize(Min = min(launch_speed, na.rm = TRUE),
Q1 = quantile(launch_speed, 0.25, na.rm = TRUE),
Median = median(launch_speed, na.rm = TRUE),
Q3 = quantile(launch_speed, 0.75, na.rm = TRUE),
Max = max(launch_speed, na.rm = TRUE),
Mean = mean(launch_speed, na.rm = TRUE),
SD = sd(launch_speed, na.rm = TRUE))
ggplot(data = bips, mapping = aes(x = launch_speed)) +
geom_histogram(fill = "#0066CC", color = "#FFFFFF") +
scale_x_continuous(breaks = pretty_breaks(n = 10)) +
scale_y_continuous(labels = scales::comma) +
geom_text(
data = summary_stats,
aes(x = Inf, y = Inf, label = paste(
"Min:", round(Min, 2), "\n",
"Q1:", round(Q1, 2), "\n",
"Median:", round(Median, 2), "\n",
"Q3:", round(Q3, 2), "\n",
"Max:", round(Max, 2), "\n",
"Mean:", round(Mean, 2), "\n",
"SD:", round(SD, 2))), hjust = 1.1, vjust = 1.1) +
labs(x = "Exit Velocity (mph)", y = "Count", title = "Distribution of Exit Velocity") +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
summary_stats <- bips %>%
summarize(Min = min(launch_angle, na.rm = TRUE),
Q1 = quantile(launch_angle, 0.25, na.rm = TRUE),
Median = median(launch_angle, na.rm = TRUE),
Q3 = quantile(launch_angle, 0.75, na.rm = TRUE),
Max = max(launch_angle, na.rm = TRUE),
Mean = mean(launch_angle, na.rm = TRUE),
SD = sd(launch_angle, na.rm = TRUE))
ggplot(data = bips, mapping = aes(x = launch_angle)) +
geom_histogram(fill = "#0066CC", color = "#FFFFFF") +
scale_x_continuous(breaks = pretty_breaks(n = 10)) +
scale_y_continuous(labels = scales::comma) +
geom_text(
data = summary_stats,
aes(x = Inf, y = Inf, label = paste(
"Min:", round(Min, 2), "\n",
"Q1:", round(Q1, 2), "\n",
"Median:", round(Median, 2), "\n",
"Q3:", round(Q3, 2), "\n",
"Max:", round(Max, 2), "\n",
"Mean:", round(Mean, 2), "\n",
"SD:", round(SD, 2))), hjust = 1.1, vjust = 1.1) +
labs(x = "Launch Angle (degrees)", y = "Count", title = "Distribution of Launch Angle") +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
# Numerical summary of spray angle
cat("\nSpray Angle 5 Number Summary\n")
summary(bips$spray_angle)
# Visual summary of spray angle
summary_stats <- bips %>%
summarize(Min = min(spray_angle, na.rm = TRUE),
Q1 = quantile(spray_angle, 0.25, na.rm = TRUE),
Median = median(spray_angle, na.rm = TRUE),
Q3 = quantile(spray_angle, 0.75, na.rm = TRUE),
Max = max(spray_angle, na.rm = TRUE),
Mean = mean(spray_angle, na.rm = TRUE),
SD = sd(spray_angle, na.rm = TRUE))
ggplot(data = bips, mapping = aes(x = spray_angle)) +
geom_histogram(bins = 15, fill = "#0066CC", color = "#FFFFFF") +
scale_x_continuous(breaks = pretty_breaks(n = 10)) +
scale_y_continuous(labels = scales::comma) +
geom_text(
data = summary_stats,
aes(x = Inf, y = Inf, label = paste(
"Min:", round(Min, 2), "\n",
"Q1:", round(Q1, 2), "\n",
"Median:", round(Median, 2), "\n",
"Q3:", round(Q3, 2), "\n",
"Max:", round(Max, 2), "\n",
"Mean:", round(Mean, 2), "\n",
"SD:", round(SD, 2))), hjust = 1.1, vjust = 1.1) +
labs(x = "Spray Angle (degrees)", y = "Count", title = "Distribution of Spray Angle") +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
# Categorize spray angle
bips <- bips %>%
mutate(spray_type = case_when(
stand == "R" & spray_angle < -15 ~ "pull",
stand == "R" & spray_angle >= -15 & spray_angle <= 15 ~ "center",
stand == "R" & spray_angle > 15 ~ "oppo",
stand == "L" & spray_angle > 15 ~ "pull",
stand == "L" & spray_angle >= -15 & spray_angle <= 15 ~ "center",
stand == "L" & spray_angle < -15 ~ "oppo",
TRUE ~ NA_character_))
# Calculate count for each spray type
spray_type_rates <- bips %>%
group_by(spray_type) %>%
summarise(count = n()) %>%
drop_na()
spray_type_rates$spray_type <- factor(spray_type_rates$spray_type, levels = c("center", "pull", "oppo"))
# Plot bar chart of spray type
ggplot(data = spray_type_rates, mapping = aes(x = spray_type, y = count)) +
geom_bar(stat = "identity", fill = "#0066CC", color = "#FFFFFF") +
labs(x = "Spray Type", y = "Count", title = "Distribution of Spray Type") +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
# Numerical summary of sprint speed
cat("\nSprint Speed 5 Number Summary\n")
summary(bips$sprint_speed)
# Visual summary of sprint speed
summary_stats <- bips %>%
summarize(Min = min(sprint_speed, na.rm = TRUE),
Q1 = quantile(sprint_speed, 0.25, na.rm = TRUE),
Median = median(sprint_speed, na.rm = TRUE),
Q3 = quantile(sprint_speed, 0.75, na.rm = TRUE),
Max = max(sprint_speed, na.rm = TRUE),
Mean = mean(sprint_speed, na.rm = TRUE),
SD = sd(sprint_speed, na.rm = TRUE))
ggplot(data = bips, mapping = aes(x = sprint_speed)) +
geom_histogram(fill = "#0066CC", color = "#FFFFFF") +
scale_x_continuous(breaks = pretty_breaks(n = 10)) +
scale_y_continuous(labels = scales::comma) +
geom_text(
data = summary_stats,
aes(x = Inf, y = Inf, label = paste(
"Min:", round(Min, 2), "\n",
"Q1:", round(Q1, 2), "\n",
"Median:", round(Median, 2), "\n",
"Q3:", round(Q3, 2), "\n",
"Max:", round(Max, 2), "\n",
"Mean:", round(Mean, 2), "\n",
"SD:", round(SD, 2))), hjust = 1.1, vjust = 1.1) +
labs(x = "Sprint Speed (ft/s)", y = "Count", title = "Distribution of Sprint Speed") +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
# Calculate count for BIP result
bip_result_rates <- bips %>%
group_by(bip_result) %>%
summarise(count = n()) %>%
arrange(desc(count))
# Reorder levels of BIP result based on count
bip_result_rates$bip_result <- factor(bip_result_rates$bip_result,
levels = bip_result_rates$bip_result)
# Plot bar chart of BIP result
ggplot(data = bip_result_rates, mapping = aes(x = bip_result, y = count)) +
geom_bar(stat = "identity", fill = "#0066CC", color = "#FFFFFF") +
scale_y_continuous(labels = scales::comma) +
labs(x = "Result of Batted Ball", y = "Count", title = "Distribution of BIP Result") +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
# Calculate count for batted ball classification
bb_classifications <- bips %>%
group_by(bb_class) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
drop_na()
# Reorder levels of batted ball class based on count
bb_classifications$bb_class <- factor(bb_classifications$bb_class, levels = bb_classifications$bb_class)
# Plot bar chart of batted ball classifications
ggplot(data = bb_classifications, mapping = aes(x = bb_class, y = count)) +
geom_bar(stat = "identity", fill = "#0066CC", color = "#FFFFFF") +
scale_y_continuous(labels = scales::comma) +
labs(x = "Batted Ball Classification", y = "Count", title = "Distribution of Batted Ball Classifications") +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
# Reorder factors for plots
bips$bip_result <- factor(bips$bip_result, levels = bip_res_order)
bips$spray_type <- factor(bips$spray_type, levels = spray_type_order)
# Reorder factors for plots
bips$bip_result <- factor(bips$bip_result, levels = bip_res_order)
bips$spray_type <- factor(bips$spray_type, levels = spray_type_order)
bips$bb_class <- factor(bips$bb_class, levels = bb_class_order)
# Calculate proportion of events for centered and pulled balls in play
spray_type_results <- bips %>%
group_by(spray_type, bip_result) %>%
summarise(count = n()) %>%
arrange(factor(spray_type, levels = spray_type_order)) %>%
ungroup() %>%
group_by(spray_type) %>%
mutate(total_count = sum(count), proportion = round(100 * (count / total_count), 1)) %>%
arrange(desc(proportion)) %>%
select(-count, -total_count)
spray_type_results %>%
filter(spray_type == "center")
spray_type_results %>%
filter(spray_type == "pull")
# Plot stacked bar chart of events by spray type
ggplot(data = bips %>% filter(spray_type != "oppo"), mapping = aes(x = spray_type, fill = bip_result)) +
geom_bar(position = "fill", stat = "count") +
labs(title = "BIP Results by Spray Type", x = "Spray Type", y = "Percentage") +
scale_fill_manual(values = bip_res_colors) +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
# Calculate proportion of events for centered and pulled balls in play (fly balls only)
spray_type_results <- bips %>%
filter(bb_type == "fly_ball") %>%
group_by(spray_type, bip_result) %>%
summarise(count = n()) %>%
arrange(factor(spray_type, levels = spray_type_order)) %>%
ungroup() %>%
group_by(spray_type) %>%
mutate(total_count = sum(count), proportion = round(100 * (count / total_count), 1)) %>%
arrange(desc(proportion)) %>%
select(-count, -total_count)
spray_type_results %>%
filter(spray_type == "center")
spray_type_results %>%
filter(spray_type == "pull")
# Plot stacked bar chart of events by spray type (fly balls only)
ggplot(data = bips %>% filter(bb_type == "fly_ball", spray_type != "oppo"), mapping = aes(x = spray_type, fill = bip_result)) +
geom_bar(position = "fill", stat = "count") +
labs(title = "BIP Results by Spray Type (Fly Balls)", x = "Spray Type", y = "Percentage") +
scale_fill_manual(values = bip_res_colors) +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
# Calculate proportion of events for centered and pulled balls in play (hard-hit fly balls only)
spray_type_results <- bips %>%
filter(launch_speed >= 95, bb_type == "fly_ball") %>%
group_by(spray_type, bip_result) %>%
summarise(count = n()) %>%
arrange(factor(spray_type, levels = spray_type_order)) %>%
ungroup() %>%
group_by(spray_type) %>%
mutate(total_count = sum(count), proportion = round(100 * (count / total_count), 1)) %>%
arrange(desc(proportion)) %>%
select(-count, -total_count)
spray_type_results %>%
filter(spray_type == "center")
spray_type_results %>%
filter(spray_type == "pull")
# Plot stacked bar chart of events by spray type (fly balls only)
ggplot(data = bips %>% filter(launch_speed >= 95, bb_type == "fly_ball", spray_type != "oppo"), mapping = aes(x = spray_type, fill = bip_result)) +
geom_bar(position = "fill", stat = "count") +
labs(title = "BIP Results by Spray Type (HH Fly Balls)", x = "Spray Type", y = "Percentage") +
scale_fill_manual(values = bip_res_colors) +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
# Categorize sprint speed
bips <- bips %>%
mutate(sprint_speed_type = case_when(
sprint_speed < 26.3 ~ "slow",
sprint_speed >= 26.3 & sprint_speed <= 28.2 ~ "average",
sprint_speed > 28.2 ~ "fast",
TRUE ~ NA_character_))
# Calculate proportion of events for sprint speed types (infield ground balls only)
if_ground_balls_res <- bips %>%
filter(bb_type == "ground_ball" & hit_location < 7, !is.na(sprint_speed_type)) %>%
group_by(sprint_speed_type, bip_result) %>%
summarise(count = n()) %>%
arrange(factor(sprint_speed_type, levels = c("slow", "average", "fast"))) %>%
ungroup() %>%
group_by(sprint_speed_type) %>%
mutate(total_count = sum(count), proportion = round(100 * (count / total_count), 1)) %>%
arrange(desc(proportion)) %>%
select(-count, -total_count)
if_ground_balls_res %>%
filter(sprint_speed_type == "slow")
if_ground_balls_res %>%
filter(sprint_speed_type == "average")
if_ground_balls_res %>%
filter(sprint_speed_type == "fast")
# Plot stacked by bar chart of events by sprint speed type (infield ground balls only)
bips$sprint_speed_type <- factor(bips$sprint_speed_type, levels = sprint_speed_type_order)
ggplot(data = bips %>% filter(bb_type == "ground_ball" & hit_location < 7, !is.na(sprint_speed_type)), mapping = aes(x = sprint_speed_type, fill = bip_result)) +
geom_bar(position = "fill", stat = "count") +
labs(title = "BIP Results by Sprint Speed Type (IF Ground Balls)", x = "Sprint Speed Type", y = "Percentage") +
scale_fill_manual(values = bip_res_colors) +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
# wOBA value for each BIP result
woba_by_result <- bips %>%
group_by(bip_result) %>%
summarise(woba_value = round(mean(woba_value, na.rm = TRUE), 1))
woba_by_result
# Visualize wOBA values by BIP result
ggplot(data = woba_by_result, mapping = aes(x = bip_result, y = woba_value)) +
geom_bar(stat = "identity", fill = "#0066CC", color = "#FFFFFF") +
labs(title = "wOBA Value by BIP Result", x = "Batted Ball Result", y = "wOBA Value") +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
# Relationship between EV and LA, colored by BIP result
ggplot(data = bips, mapping = aes(x = launch_speed, y = launch_angle, color = bip_result)) +
geom_point() +
scale_color_manual(values = bip_res_colors) +
scale_x_continuous(breaks = pretty_breaks(n = 10)) +
scale_y_continuous(breaks = pretty_breaks(n = 8)) +
labs(title = "Batted Ball Results by Exit Velocity and Launch Angle", x = "Exit Velocity (mph)", y = "Launch Angle (degrees)") +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
# Relationship between EV and LA, colored by wOBA value
# Bin width for smoothing
binwidth <- 100
# Relationship between EV and LA, colored by wOBA value
ggplot(data = bips, aes(x = launch_speed, y = launch_angle, z = woba_value)) +
stat_summary_2d(aes(fill = ..value..), fun = "mean", geom = "tile", bins = 100) +
scale_fill_gradient2(low = "#0066CC", mid = "white", high = "#CC3333", midpoint = 1.0) +
scale_x_continuous(breaks = pretty_breaks(n = 10)) +
scale_y_continuous(breaks = pretty_breaks(n = 8)) +
labs(title = "wOBA Value by Exit Velocity and Launch Angle", x = "Exit Velocity (mph)", y = "Launch Angle (degrees)") +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank())
# Relationship between EV and LA, colored by batted ball classification
ggplot(data = bips, mapping = aes(x = launch_speed, y = launch_angle, color = bb_class)) +
geom_point() +
scale_color_manual(values = bip_res_colors) +
scale_x_continuous(breaks = pretty_breaks(n = 10)) +
scale_y_continuous(breaks = pretty_breaks(n = 8)) +
labs(title = "Batted Ball Classifications by Exit Velocity and Launch Angle", x = "Exit Velocity (mph)", y = "Launch Angle (degrees)") +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
# Relationship between EV and LA, colored by batted ball classification
ggplot(data = bips, mapping = aes(x = launch_speed, y = launch_angle, color = bb_class)) +
geom_point() +
scale_color_manual(values = bip_class_colors) +
scale_x_continuous(breaks = pretty_breaks(n = 10)) +
scale_y_continuous(breaks = pretty_breaks(n = 8)) +
labs(title = "Batted Ball Classifications by Exit Velocity and Launch Angle", x = "Exit Velocity (mph)", y = "Launch Angle (degrees)") +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
# Relationship between EV and LA, colored by batted ball classification
ggplot(data = bips, mapping = aes(x = launch_speed, y = launch_angle, color = bb_class)) +
geom_point() +
scale_color_manual(values = bb_class_colors) +
scale_x_continuous(breaks = pretty_breaks(n = 10)) +
scale_y_continuous(breaks = pretty_breaks(n = 8)) +
labs(title = "Batted Ball Classifications by Exit Velocity and Launch Angle", x = "Exit Velocity (mph)", y = "Launch Angle (degrees)") +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
# Plot hit locations with baseball field background
ggplot(data = bips %>% filter(player_name == "Semien, Marcus", game_year == 2023), aes(x = hc_x, y = hc_y, color = bip_result)) +
geom_spraychart(stadium_ids = "rangers", stadium_segments = "all") +
geom_point(size = 2) +
scale_color_manual(values = bip_res_colors) +
labs(title = "Hit Locations by BIP Result (Marcus Semien, 2023)", x = "Horizontal Hit Coordinate", y = "Vertical Hit Coordinate") +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
axis.title = element_text(face = "bold"),
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.title = element_blank()) +
scale_y_reverse()
ggplot(data = bips %>% filter(player_name == "Chapman, Matt", game_year == 2023), aes(x = hc_x, y = hc_y, color = bip_result)) +
geom_spraychart(stadium_ids = "blue_jays", stadium_segments = "all") +
geom_point(size = 2) +
scale_color_manual(values = bip_res_colors) +
labs(title = "Hit Locations by BIP Result (Matt Chapman, 2023)", x = "Horizontal Hit Coordinate", y = "Vertical Hit Coordinate") +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
axis.title = element_text(face = "bold"),
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.title = element_blank()) +
scale_y_reverse()
setwd("C:/Users/malco/Documents/GitHub/DS440")
# Load libraries
library(tidyverse)
library(tidymodels)
library(xgboost)
library(ranger)
library(kknn)
library(mgcv)
library(vip)
# Load processed data
train <- read.csv("project/volume/data/processed/train.csv")
val <- readRDS("project/volume/data/processed/val.rds")
# Define function to train models using tidymodels framework
train_xwobacon_model <- function(train, val, model_type, spray, model_name) {
if (spray == "no") {
train <- train %>% select(-spray_angle)
}
# Create model specification based on model type
if (model_type == "gbt") {
spec <- boost_tree(trees = tune(), min_n = tune(), tree_depth = tune(), learn_rate = tune(), sample_size = tune()) %>%
set_mode("regression") %>%
set_engine("xgboost")
params <- parameters(spec)
} else if (model_type == "rf") {
spec <- rand_forest(trees = tune(), min_n = tune(), mtry = tune()) %>%
set_mode("regression") %>%
set_engine("ranger", importance = "impurity")
num_predictors <- ncol(select(train, -bip_id, -woba_value))
mtry_param <- mtry(range = c(1, num_predictors))
params <- parameters(spec) %>%
update(mtry = mtry_param)
} else if (model_type == "knn") {
spec <- nearest_neighbor(neighbors = tune(), weight_func = "rectangular", dist_power = 2) %>%
set_mode("regression") %>%
set_engine("kknn")
params <- parameters(spec)
} else if (model_type == "knn_gam") {
validation <- analysis(val$splits[[1]])
train_knn <- train %>% filter(ground_ball == 0)
val_knn <- validation %>% filter(ground_ball == 0)
train_gam <- train %>% filter(ground_ball == 1)
val_gam <- validation %>% filter(ground_ball == 1)
spec_knn <- nearest_neighbor()
}
# Create model recipe
if (model_type == "knn_scaled") {
rec <- recipe(woba_value ~ ., data = train) %>%
update_role(bip_id, bb_class, ground_ball, new_role = "ID") %>%
step_normalize(all_predictors(), role = "predictor", method = "range")
} else if (model_type == "knn_gam") {
} else {
rec <- recipe(woba_value ~ ., data = train) %>%
update_role(bip_id, bb_class, ground_ball, new_role = "ID")
}
# Combine specification and recipe into a workflow
wf <- workflow() %>%
add_model(spec) %>%
add_recipe(rec)
# Tune hyperparameters via Bayesian optimization using validation set
tune_res <- wf %>%
tune_bayes(resamples = val,
initial = 10,
iter = 100,
param_info = params,
control = control_bayes(verbose = TRUE, no_improve = 10, seed = 40),
metrics = metric_set(rmse))
# Collect validation errors
validation_error <- tune_res %>%
collect_metrics() %>%
filter(.metric == "rmse")
# Save validation performances, including best one
write.csv(validation_error, paste0("project/volume/models/", model_name, "_val_error.csv"))
# Extract best-performing hyperparameters
best_params <- select_best(tune_res, "rmse")
# Train best candidate model
set.seed(40)
final_model <- wf %>%
finalize_workflow(best_params) %>%
fit(data = train)
# Save best model
saveRDS(final_model, paste0("project/volume/models/", model_name, ".rds"))
# Generate variable importance plot
if (model_type %in% c("gbt", "rf")) {
vip_plot <- final_model %>%
extract_fit_parsnip() %>%
vip() +
ggtitle("Feature Importance")
# Save VIP plot
ggsave(filename = paste0("project/volume/plots/", model_name, "_vip.png"), plot = vip_plot, width = 10, height = 8, dpi = 300)
}
}
# Use function to train models
train_xwobacon_model(train, val, spray = "no", model_type = "gbt", model_name = "gbt_without_spray_model")
train_xwobacon_model(train, val, spray = "yes", model_type = "gbt", model_name = "gbt_with_spray_model")
train_xwobacon_model(train, val, spray = "no", model_type = "rf", model_name = "rf_without_spray_model")
train_xwobacon_model(train, val, spray = "yes", model_type = "rf", model_name = "rf_with_spray_model")
