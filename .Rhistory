filter(PitchGroup == "BB") %>%
group_by(PitcherId, Year) %>%
summarise(`BB Stuff+` = round(mean(`pStuff+`, na.rm = TRUE), 0))
os_metrics <- tm_pitch_metrics %>%
filter(PitchGroup == "OS") %>%
group_by(PitcherId, Year) %>%
summarise(`OS Stuff+` = round(mean(`pStuff+`, na.rm = TRUE), 0))
tm_avgs <- left_join(tm_avgs, fb_metrics, by = c("PitcherId", "Year"))
tm_avgs <- left_join(tm_avgs, bb_metrics, by = c("PitcherId", "Year"))
tm_avgs <- left_join(tm_avgs, os_metrics, by = c("PitcherId", "Year"))
# Determine pitcher handedness
tm_hand <- tm_data %>%
group_by(PitcherId, Year) %>%
summarize(RightPercentage = sum(PitcherThrows == "Right") / n(),
LeftPercentage = sum(PitcherThrows == "Left") / n(),
TotalPitches = n()) %>%
mutate(Throws = ifelse(RightPercentage >= 0.05 & LeftPercentage >= 0.05, "Switch", ifelse(RightPercentage > LeftPercentage, "RHP", "LHP"))) %>%
select(PitcherId, Year, Throws)
# Calculate TM totals
tm_totals <- tm_data %>%
group_by(PitcherId, Year) %>%
summarise(`Pitches TM` = n(), Swings = sum(Swing == 1), `Batted Balls` = sum(BBE == 1),
H = sum(Hit == 1), `HR-A` = sum(PlayResult == "HomeRun"), FB = sum(TaggedHitType == "FlyBall"),
SO = sum(KorBB == "Strikeout"), BB = sum(KorBB == "Walk"), HB = sum(PitchCall == "HitByPitch"),
AB = `Batted Balls` + SO, BF = AB + BB + HB, Outs = `Batted Balls` - H + SO, `IP TM` = Outs / 3)
# Calculate league HR/FB ratio
lg_hrfb <- tm_totals %>%
group_by(Year) %>%
summarise(lg_HR = sum(`HR-A`),
lg_FB = sum(FB),
lg_HRFB = lg_HR / lg_FB)
# Calculate total xwOBAcon
tm_stats <- tm_data %>%
filter(BBE == 1) %>%
left_join(ncaa_guts, by = "Year") %>%
mutate(xwOBAcon = (Prob1B * w1B) + (Prob2B * w2B) + (Prob3B * w3B) + (ProbHR * wHR)) %>%
group_by(PitcherId, Year) %>%
summarise(xwOBAcon = sum(xwOBAcon, na.rm = TRUE))
tm_stats <- tm_totals %>% left_join(tm_stats, by = c("PitcherId", "Year"))
tm_stats <- tm_stats %>% left_join(lg_hrfb, by = "Year")
# Calculate xFIP, xwOBA, and BABIP
tm_stats <- tm_stats %>%
left_join(ncaa_guts, by = "Year") %>%
mutate(xFIP = round(((13 * (FB * lg_HRFB) + 3 * (BB + HB) - 2 * SO) / (`IP TM`)) + cFIP, 2),
xwOBA = round((xwOBAcon + (wBB * BB) + (wHBP * HB)) / BF, 3),
BABIP = round((H - `HR-A`) / (AB - SO - `HR-A`), 3)) %>%
select(PitcherId, Year, `IP TM`, `Pitches TM`, Swings, `Batted Balls`, xFIP, xwOBA, BABIP)
# Calculate league average xFIP
lg_xfip <- tm_stats %>%
group_by(Year) %>%
summarise(lg_xFIP = weighted.mean(xFIP, `IP TM`, na.rm = TRUE))
tm_stats <- tm_stats %>% left_join(lg_xfip, by = "Year")
# Calculate important rates (batted ball profile and plate discipline)
tm_rates <- tm_pitch_metrics %>%
group_by(PitcherId, Year) %>%
summarise(EV = round(mean(ExitSpeed, na.rm = TRUE), 1),
LA = round(mean(Angle, na.rm = TRUE), 1),
`Sweet Spot%` = round(100 * (sum(BBE == 1 & Angle >= 8 & Angle <= 32) / sum(BBE == 1)), 1),
`Hard-Hit%` = round(100 * (sum(BBE == 1 & ExitSpeed >= 95) / sum(BBE == 1)), 1),
`GB%` = round(100 * (sum(TaggedHitType == "GroundBall") / sum(BBE == 1)), 1),
`FB%` = round(100 * (sum(TaggedHitType == "FlyBall") / sum(BBE == 1)), 1),
`LD%` = round(100 * (sum(TaggedHitType == "LineDrive") / sum(BBE == 1)), 1),
`Pull%` = round(100 * (sum(Pull == 1) / sum(BBE == 1)), 1),
`Straight%` = round(100 * (sum(Straight == 1) / sum(BBE == 1)), 1),
`Oppo%` = round(100 * (sum(Oppo == 1) / sum(BBE == 1)), 1),
`Weak%` = round(100 * (sum(BBE == 1 & BattedBallType == "Weak") / sum(BBE == 1)), 1),
`Topped%` = round(100 * (sum(BBE == 1 & BattedBallType == "Topped") / sum(BBE == 1)), 1),
`Under%` = round(100 * (sum(BBE == 1 & BattedBallType == "Under") / sum(BBE == 1)), 1),
`Flare/Burner%` = round(100 * (sum(BBE == 1 & BattedBallType == "Flare/Burner") / sum(BBE == 1)), 1),
`Solid%` = round(100 * (sum(BBE == 1 & BattedBallType == "Solid") / sum(BBE == 1)), 1),
`Barrel%` = round(100 * (sum(BBE == 1 & BattedBallType == "Barrel") / sum(BBE == 1)), 1),
ICR = round(100 * (sum(BBE == 1 & BattedBallType %in% c("Barrel", "Solid", "Flare/Burner")) / sum(BBE == 1)), 1),
`Zone%` = round(100 * (sum(StrikeZone == 1) / n()), 1),
`TopZone%` = round(100 * (sum(TopZone == 1) / n()), 1),
`BotZone%` = round(100 * (sum(BotZone == 1) / n()), 1),
`Edge%` = round(100 * (sum(AttackRegion == "Shadow") / n()), 1),
`Meatball%` = round(100 * (sum(AttackRegion == "Heart") / n()), 1),
`CStr%` = round(100 * sum(PitchCall == "StrikeCalled") / n(), 1),
`SwStr%` = round(100 * (sum(PitchCall == "StrikeSwinging") / n()), 1),
`CSW%` = round(100 * (sum(PitchCall == "StrikeSwinging" | PitchCall == "StrikeCalled") / n()), 1),
`Whiff%` = round(100 * (sum(PitchCall == "StrikeSwinging") / sum(Swing == 1)), 1),
`IZWhiff%` = round(100 * (sum(PitchCall == "StrikeSwinging" & StrikeZone == 1) / sum(Swing == 1 & StrikeZone == 1)), 1),
`Chase%` = round(100 * (sum(Swing == 1 & StrikeZone == 0) / sum(StrikeZone == 0)), 1),
`F-Strike%` = round(100 * (sum((PitchCall == "StrikeSwinging" | PitchCall == "StrikeCalled" | PitchCall == "FoulBall") & PitchCount == "0-0") / sum(PitchCount == "0-0")), 1))
# Calculate player average wOBAcon and xwOBAcon against
tm_rates2 <- tm_pitch_metrics %>%
filter(BBE == 1) %>%
left_join(ncaa_guts, by = "Year") %>%
mutate(wOBAcon = case_when(PlayResult == "Single" ~ w1B, PlayResult == "Double" ~ w2B, PlayResult == "Triple" ~ w3B, PlayResult == "HomeRun" ~ wHR, TRUE ~ 0),
xwOBAcon = (Prob1B * w1B) + (Prob2B * w2B) + (Prob3B * w3B) + (ProbHR * wHR)) %>%
group_by(PitcherId, Year) %>%
summarise(wOBAcon = round(sum(wOBAcon) / n(), 3),
xwOBAcon = round(sum(xwOBAcon) / n(), 3))
tm_rates <- left_join(tm_rates, tm_rates2, by = c("PitcherId", "Year"))
# Combine all season level TM metrics
tm_metrics <- left_join(tm_avgs, tm_hand, by = c("PitcherId", "Year"))
tm_metrics <- left_join(tm_metrics, tm_stats, by = c("PitcherId", "Year"))
tm_metrics <- left_join(tm_metrics, tm_rates, by = c("PitcherId", "Year"))
### Join NCAA and TM metrics ###
indy_metrics <- ncaa_metrics %>% left_join(college_players, by = c("player_id" = "NCAA_ID"))
indy_metrics <- indy_metrics %>% left_join(tm_metrics, by = c("TM_ID" = "PitcherId", "Year" = "Year"))
indy_metrics <- indy_metrics %>% left_join(ncaa_parkfactors, by = c("Team" = "school"))
# Calculate xFIP- and reformat IP TM
indy_metrics <- indy_metrics %>%
mutate(`xFIP-` = round(100 * (((xFIP + (xFIP - (xFIP * final_pf))) / lg_xFIP)), 0),
`IP TM` = floor(`IP TM`) + ifelse(`IP TM` %% 1 == 0.333333, 0.1, 0.2)) %>%
select(-lg_xFIP)
# Remove unneeded columns
indy_metrics <- indy_metrics %>% select(PlayerID, PlayerName, player_id, TM_ID, everything()) %>% select(-player_id, -TM_ID, -player_name, -final_pf)
# Add PlayerID to pitch level data
tm_pitch_metrics <- tm_pitch_metrics %>% rename(PlayerID = PitcherId)
# Rename dataframes
LeagueDataDF <- indy_metrics
LeaguePitchesDF <- tm_pitch_metrics
# Unload unneeded data frames from memory
rm(list = c("bb_metrics", "college_players", "con", "fb_metrics", "indy_metrics", "league_location_pitching", "league_pitchstuff", "league_stuff", "lg_avgs", "lg_avgs2", "lg_xfip",
"ncaa_parkfactors", "ncaa_metrics", "ncaa_pitching", "os_metrics", "tm_avgs", "tm_data", "tm_hand", "tm_metrics", "tm_pitch_metrics", "tm_rates", "tm_rates2", "tm_stats", "tm_totals"))
## Season-Batter Handedness Level
# Calculate TM totals
tm_hand_totals <- LeaguePitchesDF %>%
group_by(PlayerID, HandMatchup, Year) %>%
summarise(`Pitches TM` = n(), Swings = sum(Swing == 1), `Batted Balls` = sum(BBE == 1),
H = sum(Hit == 1), `1B-A` = sum(PlayResult == "Single"), `2B-A` = sum(PlayResult == "Double"),
`3B-A` = sum(PlayResult == "Triple"), `HR-A` = sum(PlayResult == "HomeRun"), FB = sum(TaggedHitType == "FlyBall"),
SO = sum(KorBB == "Strikeout"), BB = sum(KorBB == "Walk"), HB = sum(PitchCall == "HitByPitch"),
AB = `Batted Balls` + SO, BF = AB + BB + HB, Outs = `Batted Balls` - H + SO, `IP TM` = Outs / 3,
`IP TM` = floor(`IP TM`) + ifelse(`IP TM` %% 1 == 0.333333, 0.1, 0.2))
# Calculate TM totals
tm_overall_totals <- LeaguePitchesDF %>%
mutate(HandMatchup = "Overall") %>%
group_by(PlayerID, HandMatchup, Year) %>%
summarise(`Pitches TM` = n(), Swings = sum(Swing == 1), `Batted Balls` = sum(BBE == 1),
H = sum(Hit == 1), `1B-A` = sum(PlayResult == "Single"), `2B-A` = sum(PlayResult == "Double"),
`3B-A` = sum(PlayResult == "Triple"), `HR-A` = sum(PlayResult == "HomeRun"), FB = sum(TaggedHitType == "FlyBall"),
SO = sum(KorBB == "Strikeout"), BB = sum(KorBB == "Walk"), HB = sum(PitchCall == "HitByPitch"),
AB = `Batted Balls` + SO, BF = AB + BB + HB, Outs = `Batted Balls` - H + SO, `IP TM` = Outs / 3,
`IP TM` = floor(`IP TM`) + ifelse(`IP TM` %% 1 == 0.333333, 0.1, 0.2))
# Calculate total xwOBAcon
tm_hand_stats <- LeaguePitchesDF %>%
filter(BBE == 1) %>%
left_join(ncaa_guts, by = "Year") %>%
mutate(xwOBAcon = (Prob1B * w1B) + (Prob2B * w2B) + (Prob3B * w3B) + (ProbHR * wHR)) %>%
group_by(PlayerID, HandMatchup, Year) %>%
summarise(xwOBAcon = sum(xwOBAcon, na.rm = TRUE))
tm_hand_stats <- tm_hand_totals %>% left_join(tm_hand_stats, by = c("PlayerID", "HandMatchup", "Year"))
tm_hand_stats <- tm_hand_stats %>% left_join(lg_hrfb, by = "Year")
tm_overall_stats <- LeaguePitchesDF %>%
mutate(HandMatchup = "Overall") %>%
filter(BBE == 1) %>%
left_join(ncaa_guts, by = "Year") %>%
mutate(xwOBAcon = (Prob1B * w1B) + (Prob2B * w2B) + (Prob3B * w3B) + (ProbHR * wHR)) %>%
group_by(PlayerID, HandMatchup, Year) %>%
summarise(xwOBAcon = sum(xwOBAcon, na.rm = TRUE))
tm_overall_stats <- tm_overall_totals %>% left_join(tm_overall_stats, by = c("PlayerID", "HandMatchup", "Year"))
tm_overall_stats <- tm_overall_stats %>% left_join(lg_hrfb, by = "Year")
# Calculate K%, BB%, FIP, xFIP, xwOBA, and BABIP
tm_hand_stats <- tm_hand_stats %>%
group_by(PlayerID, HandMatchup, Year) %>%
left_join(ncaa_guts, by = "Year") %>%
mutate(`K%` = round(100 * (sum(SO) / sum(BF)), 1),
`BB%` = round(100 * (sum(BB) / sum(BF)), 1),
`K-BB%` = round(`K%` - `BB%`, 1),
FIP = round((((13 * `HR-A`) + (3 * (BB + HB)) - (2 * SO)) / (Outs / 3)) + cFIP, 2),
xFIP = round(((13 * (FB * lg_HRFB) + 3 * (BB + HB) - 2 * SO) / (`IP TM`)) + cFIP, 2),
wOBA = round(((wBB * BB) + (wHBP * HB) + (w1B * `1B-A`) + (w2B * `2B-A`) + (w3B * `3B-A`) + (wHR * `HR-A`)) / (BF), 3),
xwOBA = round((xwOBAcon + (wBB * BB) + (wHBP * HB)) / BF, 3),
BABIP = round((H - `HR-A`) / (AB - SO - `HR-A`), 3)) %>%
select(PlayerID, HandMatchup, Year, `IP TM`, `Pitches TM`, Swings, `Batted Balls`, `K%`, `BB%`, `K-BB%`, FIP, xFIP, wOBA, xwOBA, BABIP)
tm_overall_stats <- tm_overall_stats %>%
mutate(HandMatchup = "Overall") %>%
group_by(PlayerID, HandMatchup, Year) %>%
left_join(ncaa_guts, by = "Year") %>%
mutate(`K%` = round(100 * (sum(SO) / sum(BF)), 1),
`BB%` = round(100 * (sum(BB) / sum(BF)), 1),
`K-BB%` = round(`K%` - `BB%`, 1),
FIP = round((((13 * `HR-A`) + (3 * (BB + HB)) - (2 * SO)) / (Outs / 3)) + cFIP, 2),
xFIP = round(((13 * (FB * lg_HRFB) + 3 * (BB + HB) - 2 * SO) / (`IP TM`)) + cFIP, 2),
wOBA = round(((wBB * BB) + (wHBP * HB) + (w1B * `1B-A`) + (w2B * `2B-A`) + (w3B * `3B-A`) + (wHR * `HR-A`)) / (BF), 3),
xwOBA = round((xwOBAcon + (wBB * BB) + (wHBP * HB)) / BF, 3),
BABIP = round((H - `HR-A`) / (AB - SO - `HR-A`), 3)) %>%
select(PlayerID, HandMatchup, Year, `IP TM`, `Pitches TM`, Swings, `Batted Balls`, `K%`, `BB%`, `K-BB%`, FIP, xFIP, wOBA, xwOBA, BABIP)
# Calculate important rates (batted ball profile and plate discipline)
tm_hand_rates <- LeaguePitchesDF %>%
group_by(PlayerID, HandMatchup, Year) %>%
summarise(EV = round(mean(ExitSpeed, na.rm = TRUE), 1),
LA = round(mean(Angle, na.rm = TRUE), 1),
`Sweet Spot%` = round(100 * (sum(BBE == 1 & Angle >= 8 & Angle <= 32) / sum(BBE == 1)), 1),
`Hard-Hit%` = round(100 * (sum(BBE == 1 & ExitSpeed >= 95) / sum(BBE == 1)), 1),
`GB%` = round(100 * (sum(TaggedHitType == "GroundBall") / sum(BBE == 1)), 1),
`FB%` = round(100 * (sum(TaggedHitType == "FlyBall") / sum(BBE == 1)), 1),
`LD%` = round(100 * (sum(TaggedHitType == "LineDrive") / sum(BBE == 1)), 1),
`Pull%` = round(100 * (sum(Pull == 1) / sum(BBE == 1)), 1),
`Straight%` = round(100 * (sum(Straight == 1) / sum(BBE == 1)), 1),
`Oppo%` = round(100 * (sum(Oppo == 1) / sum(BBE == 1)), 1),
`Weak%` = round(100 * (sum(BBE == 1 & BattedBallType == "Weak") / sum(BBE == 1)), 1),
`Topped%` = round(100 * (sum(BBE == 1 & BattedBallType == "Topped") / sum(BBE == 1)), 1),
`Under%` = round(100 * (sum(BBE == 1 & BattedBallType == "Under") / sum(BBE == 1)), 1),
`Flare/Burner%` = round(100 * (sum(BBE == 1 & BattedBallType == "Flare/Burner") / sum(BBE == 1)), 1),
`Solid%` = round(100 * (sum(BBE == 1 & BattedBallType == "Solid") / sum(BBE == 1)), 1),
`Barrel%` = round(100 * (sum(BBE == 1 & BattedBallType == "Barrel") / sum(BBE == 1)), 1),
ICR = round(100 * (sum(BBE == 1 & BattedBallType %in% c("Barrel", "Solid", "Flare/Burner")) / sum(BBE == 1)), 1),
`Zone%` = round(100 * (sum(StrikeZone == 1) / n()), 1),
`TopZone%` = round(100 * (sum(TopZone == 1) / n()), 1),
`BotZone%` = round(100 * (sum(BotZone == 1) / n()), 1),
`Edge%` = round(100 * (sum(AttackRegion == "Shadow") / n()), 1),
`Meatball%` = round(100 * (sum(AttackRegion == "Heart") / n()), 1),
`CStr%` = round(100 * sum(PitchCall == "StrikeCalled") / n(), 1),
`SwStr%` = round(100 * (sum(PitchCall == "StrikeSwinging") / n()), 1),
`CSW%` = round(100 * (sum(PitchCall == "StrikeSwinging" | PitchCall == "StrikeCalled") / n()), 1),
`Whiff%` = round(100 * (sum(PitchCall == "StrikeSwinging") / sum(Swing == 1)), 1),
`IZWhiff%` = round(100 * (sum(PitchCall == "StrikeSwinging" & StrikeZone == 1) / sum(Swing == 1 & StrikeZone == 1)), 1),
`Chase%` = round(100 * (sum(Swing == 1 & StrikeZone == 0) / sum(StrikeZone == 0)), 1),
`F-Strike%` = round(100 * (sum((PitchCall == "StrikeSwinging" | PitchCall == "StrikeCalled" | PitchCall == "FoulBall") & PitchCount == "0-0") / sum(PitchCount == "0-0")), 1))
tm_overall_rates <- LeaguePitchesDF %>%
mutate(HandMatchup = "Overall") %>%
group_by(PlayerID, HandMatchup, Year) %>%
summarise(EV = round(mean(ExitSpeed, na.rm = TRUE), 1),
LA = round(mean(Angle, na.rm = TRUE), 1),
`Sweet Spot%` = round(100 * (sum(BBE == 1 & Angle >= 8 & Angle <= 32) / sum(BBE == 1)), 1),
`Hard-Hit%` = round(100 * (sum(BBE == 1 & ExitSpeed >= 95) / sum(BBE == 1)), 1),
`GB%` = round(100 * (sum(TaggedHitType == "GroundBall") / sum(BBE == 1)), 1),
`FB%` = round(100 * (sum(TaggedHitType == "FlyBall") / sum(BBE == 1)), 1),
`LD%` = round(100 * (sum(TaggedHitType == "LineDrive") / sum(BBE == 1)), 1),
`Pull%` = round(100 * (sum(Pull == 1) / sum(BBE == 1)), 1),
`Straight%` = round(100 * (sum(Straight == 1) / sum(BBE == 1)), 1),
`Oppo%` = round(100 * (sum(Oppo == 1) / sum(BBE == 1)), 1),
`Weak%` = round(100 * (sum(BBE == 1 & BattedBallType == "Weak") / sum(BBE == 1)), 1),
`Topped%` = round(100 * (sum(BBE == 1 & BattedBallType == "Topped") / sum(BBE == 1)), 1),
`Under%` = round(100 * (sum(BBE == 1 & BattedBallType == "Under") / sum(BBE == 1)), 1),
`Flare/Burner%` = round(100 * (sum(BBE == 1 & BattedBallType == "Flare/Burner") / sum(BBE == 1)), 1),
`Solid%` = round(100 * (sum(BBE == 1 & BattedBallType == "Solid") / sum(BBE == 1)), 1),
`Barrel%` = round(100 * (sum(BBE == 1 & BattedBallType == "Barrel") / sum(BBE == 1)), 1),
ICR = round(100 * (sum(BBE == 1 & BattedBallType %in% c("Barrel", "Solid", "Flare/Burner")) / sum(BBE == 1)), 1),
`Zone%` = round(100 * (sum(StrikeZone == 1) / n()), 1),
`TopZone%` = round(100 * (sum(TopZone == 1) / n()), 1),
`BotZone%` = round(100 * (sum(BotZone == 1) / n()), 1),
`Edge%` = round(100 * (sum(AttackRegion == "Shadow") / n()), 1),
`Meatball%` = round(100 * (sum(AttackRegion == "Heart") / n()), 1),
`CStr%` = round(100 * sum(PitchCall == "StrikeCalled") / n(), 1),
`SwStr%` = round(100 * (sum(PitchCall == "StrikeSwinging") / n()), 1),
`CSW%` = round(100 * (sum(PitchCall == "StrikeSwinging" | PitchCall == "StrikeCalled") / n()), 1),
`Whiff%` = round(100 * (sum(PitchCall == "StrikeSwinging") / sum(Swing == 1)), 1),
`IZWhiff%` = round(100 * (sum(PitchCall == "StrikeSwinging" & StrikeZone == 1) / sum(Swing == 1 & StrikeZone == 1)), 1),
`Chase%` = round(100 * (sum(Swing == 1 & StrikeZone == 0) / sum(StrikeZone == 0)), 1),
`F-Strike%` = round(100 * (sum((PitchCall == "StrikeSwinging" | PitchCall == "StrikeCalled" | PitchCall == "FoulBall") & PitchCount == "0-0") / sum(PitchCount == "0-0")), 1))
# Calculate player average wOBAcon and xwOBAcon against
tm_hand_rates2 <- LeaguePitchesDF %>%
filter(BBE == 1) %>%
left_join(ncaa_guts, by = "Year") %>%
mutate(wOBAcon = case_when(PlayResult == "Single" ~ w1B, PlayResult == "Double" ~ w2B, PlayResult == "Triple" ~ w3B, PlayResult == "HomeRun" ~ wHR, TRUE ~ 0),
xwOBAcon = (Prob1B * w1B) + (Prob2B * w2B) + (Prob3B * w3B) + (ProbHR * wHR)) %>%
group_by(PlayerID, HandMatchup, Year) %>%
summarise(wOBAcon = round(sum(wOBAcon) / n(), 3),
xwOBAcon = round(sum(xwOBAcon) / n(), 3))
tm_hand_rates <- left_join(tm_hand_rates, tm_hand_rates2, by = c("PlayerID", "HandMatchup", "Year"))
tm_overall_rates2 <- LeaguePitchesDF %>%
mutate(HandMatchup = "Overall") %>%
filter(BBE == 1) %>%
left_join(ncaa_guts, by = "Year") %>%
mutate(wOBAcon = case_when(PlayResult == "Single" ~ w1B, PlayResult == "Double" ~ w2B, PlayResult == "Triple" ~ w3B, PlayResult == "HomeRun" ~ wHR, TRUE ~ 0),
xwOBAcon = (Prob1B * w1B) + (Prob2B * w2B) + (Prob3B * w3B) + (ProbHR * wHR)) %>%
group_by(PlayerID, HandMatchup, Year) %>%
summarise(wOBAcon = round(sum(wOBAcon) / n(), 3),
xwOBAcon = round(sum(xwOBAcon) / n(), 3))
tm_overall_rates <- left_join(tm_overall_rates, tm_overall_rates2, by = c("PlayerID", "HandMatchup", "Year"))
# Combine all season level TM metrics
indy_hand_metrics <- left_join(tm_hand_stats, tm_hand_rates, by = c("PlayerID", "HandMatchup", "Year"))
indy_overall_metrics <- left_join(tm_overall_stats, tm_overall_rates, by = c("PlayerID", "HandMatchup", "Year"))
LeagueHandDataDF <- indy_hand_metrics %>% rbind(indy_overall_metrics) %>% ungroup()
# Unload unneeded data frames from memory
rm(list = c("indy_hand_metrics", "tm_hand_rates", "tm_hand_rates2", "tm_hand_stats", "tm_hand_totals"))
# Pitch Group
# Calculate TM totals
tm_pgroup_totals <- LeaguePitchesDF %>%
group_by(PlayerID, PitchGroup, Year) %>%
summarise(`Pitches TM` = n(), Swings = sum(Swing == 1), `Batted Balls` = sum(BBE == 1))
# Calculate important rates (batted ball profile and plate discipline)
tm_pgroup_rates <- LeaguePitchesDF %>%
group_by(PlayerID, PitchGroup, Year) %>%
summarise(EV = round(mean(ExitSpeed, na.rm = TRUE), 1),
LA = round(mean(Angle, na.rm = TRUE), 1),
`Sweet Spot%` = round(100 * (sum(BBE == 1 & Angle >= 8 & Angle <= 32) / sum(BBE == 1)), 1),
`Hard-Hit%` = round(100 * (sum(BBE == 1 & ExitSpeed >= 95) / sum(BBE == 1)), 1),
`GB%` = round(100 * (sum(TaggedHitType == "GroundBall") / sum(BBE == 1)), 1),
`FB%` = round(100 * (sum(TaggedHitType == "FlyBall") / sum(BBE == 1)), 1),
`LD%` = round(100 * (sum(TaggedHitType == "LineDrive") / sum(BBE == 1)), 1),
`Pull%` = round(100 * (sum(Pull == 1) / sum(BBE == 1)), 1),
`Straight%` = round(100 * (sum(Straight == 1) / sum(BBE == 1)), 1),
`Oppo%` = round(100 * (sum(Oppo == 1) / sum(BBE == 1)), 1),
`Weak%` = round(100 * (sum(BBE == 1 & BattedBallType == "Weak") / sum(BBE == 1)), 1),
`Topped%` = round(100 * (sum(BBE == 1 & BattedBallType == "Topped") / sum(BBE == 1)), 1),
`Under%` = round(100 * (sum(BBE == 1 & BattedBallType == "Under") / sum(BBE == 1)), 1),
`Flare/Burner%` = round(100 * (sum(BBE == 1 & BattedBallType == "Flare/Burner") / sum(BBE == 1)), 1),
`Solid%` = round(100 * (sum(BBE == 1 & BattedBallType == "Solid") / sum(BBE == 1)), 1),
`Barrel%` = round(100 * (sum(BBE == 1 & BattedBallType == "Barrel") / sum(BBE == 1)), 1),
ICR = round(100 * (sum(BBE == 1 & BattedBallType %in% c("Barrel", "Solid", "Flare/Burner")) / sum(BBE == 1)), 1),
`Zone%` = round(100 * (sum(StrikeZone == 1) / n()), 1),
`TopZone%` = round(100 * (sum(TopZone == 1) / n()), 1),
`BotZone%` = round(100 * (sum(BotZone == 1) / n()), 1),
`Edge%` = round(100 * (sum(AttackRegion == "Shadow") / n()), 1),
`Meatball%` = round(100 * (sum(AttackRegion == "Heart") / n()), 1),
`CStr%` = round(100 * sum(PitchCall == "StrikeCalled") / n(), 1),
`SwStr%` = round(100 * (sum(PitchCall == "StrikeSwinging") / n()), 1),
`CSW%` = round(100 * (sum(PitchCall == "StrikeSwinging" | PitchCall == "StrikeCalled") / n()), 1),
`Whiff%` = round(100 * (sum(PitchCall == "StrikeSwinging") / sum(Swing == 1)), 1),
`IZWhiff%` = round(100 * (sum(PitchCall == "StrikeSwinging" & StrikeZone == 1) / sum(Swing == 1 & StrikeZone == 1)), 1),
`Chase%` = round(100 * (sum(Swing == 1 & StrikeZone == 0) / sum(StrikeZone == 0)), 1),
`F-Strike%` = round(100 * (sum((PitchCall == "StrikeSwinging" | PitchCall == "StrikeCalled" | PitchCall == "FoulBall") & PitchCount == "0-0") / sum(PitchCount == "0-0")), 1))
# Calculate player average wOBAcon and xwOBAcon against
tm_pgroup_rates2 <- LeaguePitchesDF %>%
filter(BBE == 1) %>%
left_join(ncaa_guts, by = "Year") %>%
mutate(wOBAcon = case_when(PlayResult == "Single" ~ w1B, PlayResult == "Double" ~ w2B, PlayResult == "Triple" ~ w3B, PlayResult == "HomeRun" ~ wHR, TRUE ~ 0),
xwOBAcon = (Prob1B * w1B) + (Prob2B * w2B) + (Prob3B * w3B) + (ProbHR * wHR)) %>%
group_by(PlayerID, PitchGroup, Year) %>%
summarise(wOBAcon = round(sum(wOBAcon) / n(), 3),
xwOBAcon = round(sum(xwOBAcon) / n(), 3))
tm_pgroup_rates <- left_join(tm_pgroup_rates, tm_pgroup_rates2, by = c("PlayerID", "PitchGroup", "Year"))
indy_pgroup_metrics <- left_join(tm_pgroup_totals, tm_pgroup_rates, by = c("PlayerID", "PitchGroup", "Year"))
LeaguePitchGroupDataDF <- indy_pgroup_metrics %>% rbind(indy_overall_metrics) %>% ungroup()
# Unload unneeded data frames from memory
rm(list = c("indy_pgroup_metrics", "tm_pgroup_rates", "tm_pgroup_rates2", "tm_pgroup_totals"))
# Pitch Type
# Calculate TM totals
tm_ptype_totals <- LeaguePitchesDF %>%
group_by(PlayerID, PitchType, Year) %>%
summarise(`Pitches TM` = n(), Swings = sum(Swing == 1), `Batted Balls` = sum(BBE == 1))
# Calculate important rates (batted ball profile and plate discipline)
tm_ptype_rates <- LeaguePitchesDF %>%
group_by(PlayerID, PitchType, Year) %>%
summarise(EV = round(mean(ExitSpeed, na.rm = TRUE), 1),
LA = round(mean(Angle, na.rm = TRUE), 1),
`Sweet Spot%` = round(100 * (sum(BBE == 1 & Angle >= 8 & Angle <= 32) / sum(BBE == 1)), 1),
`Hard-Hit%` = round(100 * (sum(BBE == 1 & ExitSpeed >= 95) / sum(BBE == 1)), 1),
`GB%` = round(100 * (sum(TaggedHitType == "GroundBall") / sum(BBE == 1)), 1),
`FB%` = round(100 * (sum(TaggedHitType == "FlyBall") / sum(BBE == 1)), 1),
`LD%` = round(100 * (sum(TaggedHitType == "LineDrive") / sum(BBE == 1)), 1),
`Pull%` = round(100 * (sum(Pull == 1) / sum(BBE == 1)), 1),
`Straight%` = round(100 * (sum(Straight == 1) / sum(BBE == 1)), 1),
`Oppo%` = round(100 * (sum(Oppo == 1) / sum(BBE == 1)), 1),
`Weak%` = round(100 * (sum(BBE == 1 & BattedBallType == "Weak") / sum(BBE == 1)), 1),
`Topped%` = round(100 * (sum(BBE == 1 & BattedBallType == "Topped") / sum(BBE == 1)), 1),
`Under%` = round(100 * (sum(BBE == 1 & BattedBallType == "Under") / sum(BBE == 1)), 1),
`Flare/Burner%` = round(100 * (sum(BBE == 1 & BattedBallType == "Flare/Burner") / sum(BBE == 1)), 1),
`Solid%` = round(100 * (sum(BBE == 1 & BattedBallType == "Solid") / sum(BBE == 1)), 1),
`Barrel%` = round(100 * (sum(BBE == 1 & BattedBallType == "Barrel") / sum(BBE == 1)), 1),
ICR = round(100 * (sum(BBE == 1 & BattedBallType %in% c("Barrel", "Solid", "Flare/Burner")) / sum(BBE == 1)), 1),
`Zone%` = round(100 * (sum(StrikeZone == 1) / n()), 1),
`TopZone%` = round(100 * (sum(TopZone == 1) / n()), 1),
`BotZone%` = round(100 * (sum(BotZone == 1) / n()), 1),
`Edge%` = round(100 * (sum(AttackRegion == "Shadow") / n()), 1),
`Meatball%` = round(100 * (sum(AttackRegion == "Heart") / n()), 1),
`CStr%` = round(100 * sum(PitchCall == "StrikeCalled") / n(), 1),
`SwStr%` = round(100 * (sum(PitchCall == "StrikeSwinging") / n()), 1),
`CSW%` = round(100 * (sum(PitchCall == "StrikeSwinging" | PitchCall == "StrikeCalled") / n()), 1),
`Whiff%` = round(100 * (sum(PitchCall == "StrikeSwinging") / sum(Swing == 1)), 1),
`IZWhiff%` = round(100 * (sum(PitchCall == "StrikeSwinging" & StrikeZone == 1) / sum(Swing == 1 & StrikeZone == 1)), 1),
`Chase%` = round(100 * (sum(Swing == 1 & StrikeZone == 0) / sum(StrikeZone == 0)), 1),
`F-Strike%` = round(100 * (sum((PitchCall == "StrikeSwinging" | PitchCall == "StrikeCalled" | PitchCall == "FoulBall") & PitchCount == "0-0") / sum(PitchCount == "0-0")), 1))
# Calculate player average wOBAcon and xwOBAcon against
tm_ptype_rates2 <- LeaguePitchesDF %>%
filter(BBE == 1) %>%
left_join(ncaa_guts, by = "Year") %>%
mutate(wOBAcon = case_when(PlayResult == "Single" ~ w1B, PlayResult == "Double" ~ w2B, PlayResult == "Triple" ~ w3B, PlayResult == "HomeRun" ~ wHR, TRUE ~ 0),
xwOBAcon = (Prob1B * w1B) + (Prob2B * w2B) + (Prob3B * w3B) + (ProbHR * wHR)) %>%
group_by(PlayerID, PitchType, Year) %>%
summarise(wOBAcon = round(sum(wOBAcon) / n(), 3),
xwOBAcon = round(sum(xwOBAcon) / n(), 3))
tm_ptype_rates <- left_join(tm_ptype_rates, tm_ptype_rates2, by = c("PlayerID", "PitchType", "Year"))
indy_ptype_metrics <- left_join(tm_ptype_totals, tm_ptype_rates, by = c("PlayerID", "PitchType", "Year"))
LeaguePitchTypeDataDF <- indy_ptype_metrics %>% rbind(indy_overall_metrics) %>% ungroup()
# Unload unneeded data frames from memory
rm(list = c("indy_ptype_metrics", "tm_ptype_rates", "tm_ptype_rates2", "tm_ptype_totals"))
glimpse(LeaguePitchGroupDataDF)
glimpse(LeaguePitchTypeDataDF)
runApp('C:/Users/malco/Documents/GitHub/psubase_analytics/master/prod/dashboard/liondash_pitcher/app2.R')
runApp('C:/Users/malco/Documents/GitHub/psubase_analytics/master/prod/dashboard/liondash_pitcher/app2.R')
runApp('C:/Users/malco/Documents/GitHub/psubase_analytics/master/prod/dashboard/liondash_pitcher/app2.R')
runApp('C:/Users/malco/Documents/GitHub/psubase_analytics/master/prod/dashboard/liondash_pitcher/app2.R')
runApp('C:/Users/malco/Documents/GitHub/psubase_analytics/master/prod/dashboard/liondash_pitcher/app2.R')
runApp('C:/Users/malco/Documents/GitHub/psubase_analytics/master/prod/dashboard/liondash_pitcher/app2.R')
runApp('C:/Users/malco/Documents/GitHub/psubase_analytics/master/prod/dashboard/liondash_pitcher/app2.R')
runApp('C:/Users/malco/Documents/GitHub/psubase_analytics/master/prod/dashboard/liondash_pitcher/app2.R')
runApp('C:/Users/malco/Documents/GitHub/psubase_analytics/master/prod/dashboard/liondash_pitcher/app2.R')
setwd("C:/Users/malco/Documents/GitHub/DS440")
# Load libraries
library(tidyverse)
library(tidymodels)
library(xgboost)
library(ranger)
library(kknn)
library(mgcv)
library(vip)
# Load processed data
train <- read.csv("project/volume/data/processed/train.csv")
val <- read.csv("project/volume/data/processed/val.csv")
val_set <- readRDS("project/volume/data/processed/val_set.rds")
# Define function to train models using tidymodels framework
train_xwobacon_model <- function(train, val, model_type, spray, model_name) {
if (spray == "no") {
train <- train %>% select(-spray_angle)
val <- val %>% select(-spray_angle)
}
# Create model specification based on model type
if (model_type == "gbt") {
spec <- boost_tree(trees = tune(), min_n = tune(), tree_depth = tune(), learn_rate = tune(), sample_size = tune()) %>%
set_mode("regression") %>%
set_engine("xgboost")
params <- parameters(spec)
} else if (model_type == "rf") {
spec <- rand_forest(trees = tune(), min_n = tune(), mtry = tune()) %>%
set_mode("regression") %>%
set_engine("ranger", importance = "impurity")
num_predictors <- ncol(select(train, -bip_id, -bb_class, -woba_value))
mtry_param <- mtry(range = c(1, num_predictors))
params <- parameters(spec) %>% update(mtry = mtry_param)
} else if (model_type == "knn") {
spec <- nearest_neighbor(neighbors = tune(), weight_func = "rectangular", dist_power = 2) %>%
set_mode("regression") %>%
set_engine("kknn")
params <- grid_regular(neighbors(range = c(100, 600)), levels = 6)
} else if (model_type == "knn_gam") {
train_knn <- train %>% filter(!(bb_class %in% c("poorly_weak", "poorly_topped")))
val_knn <- val %>% filter(!(bb_class %in% c("poorly_weak", "poorly_topped")))
spec_knn <- nearest_neighbor(neighbors = tune(), weight_func = "rectangular", dist_power = 2) %>%
set_mode("regression") %>%
set_engine("kknn")
params_knn <- grid_regular("neighbors", levels = seq(5, 10, by = 5))
train_gam <- train %>% filter(bb_class %in% c("poorly_weak", "poorly_topped"))
val_gam <- val %>% filter(bb_class %in% c("poorly_weak", "poorly_topped"))
spec_gam <- gen_additive_mod() %>%
set_mode("regression") %>%
set_engine("mgcv")
}
# Create model recipe
if (model_type == "knn") {
rec <- recipe(woba_value ~ ., data = train) %>%
update_role(bip_id, bb_class, new_role = "ID") %>%
step_normalize(all_predictors(), role = "predictor")
} else if (model_type == "knn_gam") {
#rec_knn <-
#rec_gam <-
} else {
rec <- recipe(woba_value ~ ., data = train) %>%
update_role(bip_id, bb_class, new_role = "ID")
}
# Combine specification and recipe into a workflow
if (model_type != "knn_gam") {
wf <- workflow() %>%
add_model(spec) %>%
add_recipe(rec)
} else {
wf_knn <- workflow() %>%
add_model(spec_knn) %>%
add_recipe(rec_knn)
wf_gam <- workflow() %>%
add_model(spec_gam) %>%
add_recipe(rec_gam)
}
# Tune hyperparameters via Bayesian optimization using validation set
if (!(model_type %in% c("knn", "knn_gam"))) {
tune_res <- wf %>%
tune_bayes(resamples = val_set,
initial = 10,
iter = 100,
param_info = params,
control = control_bayes(verbose = TRUE, no_improve = 10, seed = 40),
metrics = metric_set(rmse))
} else if (model_type == "knn") {
tune_res <- wf %>%
tune_grid(resamples = val_set,
grid = params,
control = control_grid(verbose = TRUE),
metrics = metric_set(rmse))
} else if (model_type == "knn_gam") {
tune_res_knn <- wf %>%
tune_grid(resamples = val_set,
grid = params,
control = control,
metrics = metric_set(rmse))
#tune_res_gam
}
# Collect validation errors
validation_error <- tune_res %>%
collect_metrics() %>%
filter(.metric == "rmse")
# Save validation performances, including best one
write.csv(validation_error, paste0("project/volume/models/", model_name, "_val_error.csv"))
# Extract best-performing hyperparameters
best_params <- select_best(tune_res, "rmse")
# Combine training and validation to train final model
train <- rbind(train, val)
# Train best candidate model
set.seed(40)
final_model <- wf %>%
finalize_workflow(best_params) %>%
fit(data = train)
# Save best model
saveRDS(final_model, paste0("project/volume/models/", model_name, ".rds"))
# Generate variable importance plot
if (model_type %in% c("gbt", "rf")) {
vip_plot <- final_model %>%
extract_fit_parsnip() %>%
vip() +
ggtitle("Feature Importance")
# Save VIP plot
ggsave(filename = paste0("project/volume/plots/", model_name, "_vip.png"), plot = vip_plot, width = 10, height = 8, dpi = 300)
}
}
glimpse(val_set)
train_xwobacon_model(train, val, spray = "no", model_type = "knn", model_name = "knn_without_spray_model")
train_xwobacon_model(train, val, spray = "yes", model_type = "knn", model_name = "knn_with_spray_model")
